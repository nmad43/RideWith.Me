/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://code.google.com/p/google-apis-client-generator/
 * (build: 2013-11-22 19:59:01 UTC)
 * on 2013-12-08 at 23:32:18 UTC 
 * Modify at your own risk.
 */

package com.g5.ridewithme.notificationendpoint;

/**
 * Service definition for Notificationendpoint (v1).
 *
 * <p>
 * This is an API
 * </p>
 *
 * <p>
 * For more information about this service, see the
 * <a href="" target="_blank">API Documentation</a>
 * </p>
 *
 * <p>
 * This service uses {@link NotificationendpointRequestInitializer} to initialize global parameters via its
 * {@link Builder}.
 * </p>
 *
 * @since 1.3
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public class Notificationendpoint extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

  // Note: Leave this static initializer at the top of the file.
  static {
    com.google.api.client.util.Preconditions.checkState(
        com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
        com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 15,
        "You are currently running with version %s of google-api-client. " +
        "You need at least version 1.15 of google-api-client to run version " +
        "1.16.0-rc of the notificationendpoint library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
  }

  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_ROOT_URL = "https://fiuridewithme.appspot.com/_ah/api/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_SERVICE_PATH = "notificationendpoint/v1/";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

  /**
   * Constructor.
   *
   * <p>
   * Use {@link Builder} if you need to specify any of the optional parameters.
   * </p>
   *
   * @param transport HTTP transport, which should normally be:
   *        <ul>
   *        <li>Google App Engine:
   *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
   *        <li>Android: {@code newCompatibleTransport} from
   *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
   *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
   *        </li>
   *        </ul>
   * @param jsonFactory JSON factory, which may be:
   *        <ul>
   *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
   *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
   *        <li>Android Honeycomb or higher:
   *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
   *        </ul>
   * @param httpRequestInitializer HTTP request initializer or {@code null} for none
   * @since 1.7
   */
  public Notificationendpoint(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
      com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
    this(new Builder(transport, jsonFactory, httpRequestInitializer));
  }

  /**
   * @param builder builder
   */
  Notificationendpoint(Builder builder) {
    super(builder);
  }

  @Override
  protected void initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest) throws java.io.IOException {
    super.initialize(httpClientRequest);
  }

  /**
   * An accessor for creating requests from the NotificationController collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Notificationendpoint notificationendpoint = new Notificationendpoint(...);}
   *   {@code Notificationendpoint.NotificationController.List request = notificationendpoint.notificationController().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public NotificationController notificationController() {
    return new NotificationController();
  }

  /**
   * The "notificationController" collection of methods.
   */
  public class NotificationController {

    /**
     * Create a request for the method "notificationController.getSendMethod".
     *
     * This request holds the parameters needed by the the notificationendpoint server.  After setting
     * any optional parameters, call the {@link GetSendMethod#execute()} method to invoke the remote
     * operation.
     *
     * @return the request
     */
    public GetSendMethod getSendMethod() throws java.io.IOException {
      GetSendMethod result = new GetSendMethod();
      initialize(result);
      return result;
    }

    public class GetSendMethod extends NotificationendpointRequest<Void> {

      private static final String REST_PATH = "void";

      /**
       * Create a request for the method "notificationController.getSendMethod".
       *
       * This request holds the parameters needed by the the notificationendpoint server.  After setting
       * any optional parameters, call the {@link GetSendMethod#execute()} method to invoke the remote
       * operation. <p> {@link GetSendMethod#initialize(com.google.api.client.googleapis.services.Abstra
       * ctGoogleClientRequest)} must be called to initialize this instance immediately after invoking
       * the constructor. </p>
       *
       * @since 1.13
       */
      protected GetSendMethod() {
        super(Notificationendpoint.this, "GET", REST_PATH, null, Void.class);
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public GetSendMethod setAlt(java.lang.String alt) {
        return (GetSendMethod) super.setAlt(alt);
      }

      @Override
      public GetSendMethod setFields(java.lang.String fields) {
        return (GetSendMethod) super.setFields(fields);
      }

      @Override
      public GetSendMethod setKey(java.lang.String key) {
        return (GetSendMethod) super.setKey(key);
      }

      @Override
      public GetSendMethod setOauthToken(java.lang.String oauthToken) {
        return (GetSendMethod) super.setOauthToken(oauthToken);
      }

      @Override
      public GetSendMethod setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (GetSendMethod) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public GetSendMethod setQuotaUser(java.lang.String quotaUser) {
        return (GetSendMethod) super.setQuotaUser(quotaUser);
      }

      @Override
      public GetSendMethod setUserIp(java.lang.String userIp) {
        return (GetSendMethod) super.setUserIp(userIp);
      }

      @Override
      public GetSendMethod set(String parameterName, Object value) {
        return (GetSendMethod) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "notificationController.handleRequests".
     *
     * This request holds the parameters needed by the the notificationendpoint server.  After setting
     * any optional parameters, call the {@link HandleRequests#execute()} method to invoke the remote
     * operation.
     *
     * @return the request
     */
    public HandleRequests handleRequests() throws java.io.IOException {
      HandleRequests result = new HandleRequests();
      initialize(result);
      return result;
    }

    public class HandleRequests extends NotificationendpointRequest<Void> {

      private static final String REST_PATH = "handleRequests";

      /**
       * Create a request for the method "notificationController.handleRequests".
       *
       * This request holds the parameters needed by the the notificationendpoint server.  After setting
       * any optional parameters, call the {@link HandleRequests#execute()} method to invoke the remote
       * operation. <p> {@link HandleRequests#initialize(com.google.api.client.googleapis.services.Abstr
       * actGoogleClientRequest)} must be called to initialize this instance immediately after invoking
       * the constructor. </p>
       *
       * @since 1.13
       */
      protected HandleRequests() {
        super(Notificationendpoint.this, "POST", REST_PATH, null, Void.class);
      }

      @Override
      public HandleRequests setAlt(java.lang.String alt) {
        return (HandleRequests) super.setAlt(alt);
      }

      @Override
      public HandleRequests setFields(java.lang.String fields) {
        return (HandleRequests) super.setFields(fields);
      }

      @Override
      public HandleRequests setKey(java.lang.String key) {
        return (HandleRequests) super.setKey(key);
      }

      @Override
      public HandleRequests setOauthToken(java.lang.String oauthToken) {
        return (HandleRequests) super.setOauthToken(oauthToken);
      }

      @Override
      public HandleRequests setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (HandleRequests) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public HandleRequests setQuotaUser(java.lang.String quotaUser) {
        return (HandleRequests) super.setQuotaUser(quotaUser);
      }

      @Override
      public HandleRequests setUserIp(java.lang.String userIp) {
        return (HandleRequests) super.setUserIp(userIp);
      }

      @Override
      public HandleRequests set(String parameterName, Object value) {
        return (HandleRequests) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "notificationController.requestBuild".
     *
     * This request holds the parameters needed by the the notificationendpoint server.  After setting
     * any optional parameters, call the {@link RequestBuild#execute()} method to invoke the remote
     * operation.
     *
     * @param content the {@link com.g5.ridewithme.notificationendpoint.model.Request}
     * @return the request
     */
    public RequestBuild requestBuild(com.g5.ridewithme.notificationendpoint.model.Request content) throws java.io.IOException {
      RequestBuild result = new RequestBuild(content);
      initialize(result);
      return result;
    }

    public class RequestBuild extends NotificationendpointRequest<Void> {

      private static final String REST_PATH = "requestBuild";

      /**
       * Create a request for the method "notificationController.requestBuild".
       *
       * This request holds the parameters needed by the the notificationendpoint server.  After setting
       * any optional parameters, call the {@link RequestBuild#execute()} method to invoke the remote
       * operation. <p> {@link
       * RequestBuild#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param content the {@link com.g5.ridewithme.notificationendpoint.model.Request}
       * @since 1.13
       */
      protected RequestBuild(com.g5.ridewithme.notificationendpoint.model.Request content) {
        super(Notificationendpoint.this, "POST", REST_PATH, content, Void.class);
      }

      @Override
      public RequestBuild setAlt(java.lang.String alt) {
        return (RequestBuild) super.setAlt(alt);
      }

      @Override
      public RequestBuild setFields(java.lang.String fields) {
        return (RequestBuild) super.setFields(fields);
      }

      @Override
      public RequestBuild setKey(java.lang.String key) {
        return (RequestBuild) super.setKey(key);
      }

      @Override
      public RequestBuild setOauthToken(java.lang.String oauthToken) {
        return (RequestBuild) super.setOauthToken(oauthToken);
      }

      @Override
      public RequestBuild setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (RequestBuild) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public RequestBuild setQuotaUser(java.lang.String quotaUser) {
        return (RequestBuild) super.setQuotaUser(quotaUser);
      }

      @Override
      public RequestBuild setUserIp(java.lang.String userIp) {
        return (RequestBuild) super.setUserIp(userIp);
      }

      @Override
      public RequestBuild set(String parameterName, Object value) {
        return (RequestBuild) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "notificationController.sendEmail".
     *
     * This request holds the parameters needed by the the notificationendpoint server.  After setting
     * any optional parameters, call the {@link SendEmail#execute()} method to invoke the remote
     * operation.
     *
     * @param content the {@link com.g5.ridewithme.notificationendpoint.model.Notification}
     * @return the request
     */
    public SendEmail sendEmail(com.g5.ridewithme.notificationendpoint.model.Notification content) throws java.io.IOException {
      SendEmail result = new SendEmail(content);
      initialize(result);
      return result;
    }

    public class SendEmail extends NotificationendpointRequest<Void> {

      private static final String REST_PATH = "sendEmail";

      /**
       * Create a request for the method "notificationController.sendEmail".
       *
       * This request holds the parameters needed by the the notificationendpoint server.  After setting
       * any optional parameters, call the {@link SendEmail#execute()} method to invoke the remote
       * operation. <p> {@link
       * SendEmail#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param content the {@link com.g5.ridewithme.notificationendpoint.model.Notification}
       * @since 1.13
       */
      protected SendEmail(com.g5.ridewithme.notificationendpoint.model.Notification content) {
        super(Notificationendpoint.this, "POST", REST_PATH, content, Void.class);
      }

      @Override
      public SendEmail setAlt(java.lang.String alt) {
        return (SendEmail) super.setAlt(alt);
      }

      @Override
      public SendEmail setFields(java.lang.String fields) {
        return (SendEmail) super.setFields(fields);
      }

      @Override
      public SendEmail setKey(java.lang.String key) {
        return (SendEmail) super.setKey(key);
      }

      @Override
      public SendEmail setOauthToken(java.lang.String oauthToken) {
        return (SendEmail) super.setOauthToken(oauthToken);
      }

      @Override
      public SendEmail setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (SendEmail) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public SendEmail setQuotaUser(java.lang.String quotaUser) {
        return (SendEmail) super.setQuotaUser(quotaUser);
      }

      @Override
      public SendEmail setUserIp(java.lang.String userIp) {
        return (SendEmail) super.setUserIp(userIp);
      }

      @Override
      public SendEmail set(String parameterName, Object value) {
        return (SendEmail) super.set(parameterName, value);
      }
    }

  }

  /**
   * Builder for {@link Notificationendpoint}.
   *
   * <p>
   * Implementation is not thread-safe.
   * </p>
   *
   * @since 1.3.0
   */
  public static final class Builder extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

    /**
     * Returns an instance of a new builder.
     *
     * @param transport HTTP transport, which should normally be:
     *        <ul>
     *        <li>Google App Engine:
     *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *        <li>Android: {@code newCompatibleTransport} from
     *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *        </li>
     *        </ul>
     * @param jsonFactory JSON factory, which may be:
     *        <ul>
     *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *        <li>Android Honeycomb or higher:
     *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *        </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
        com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      super(
          transport,
          jsonFactory,
          DEFAULT_ROOT_URL,
          DEFAULT_SERVICE_PATH,
          httpRequestInitializer,
          false);
    }

    /** Builds a new instance of {@link Notificationendpoint}. */
    @Override
    public Notificationendpoint build() {
      return new Notificationendpoint(this);
    }

    @Override
    public Builder setRootUrl(String rootUrl) {
      return (Builder) super.setRootUrl(rootUrl);
    }

    @Override
    public Builder setServicePath(String servicePath) {
      return (Builder) super.setServicePath(servicePath);
    }

    @Override
    public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
    }

    @Override
    public Builder setApplicationName(String applicationName) {
      return (Builder) super.setApplicationName(applicationName);
    }

    @Override
    public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
      return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
    }

    @Override
    public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
      return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
    }

    @Override
    public Builder setSuppressAllChecks(boolean suppressAllChecks) {
      return (Builder) super.setSuppressAllChecks(suppressAllChecks);
    }

    /**
     * Set the {@link NotificationendpointRequestInitializer}.
     *
     * @since 1.12
     */
    public Builder setNotificationendpointRequestInitializer(
        NotificationendpointRequestInitializer notificationendpointRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(notificationendpointRequestInitializer);
    }

    @Override
    public Builder setGoogleClientRequestInitializer(
        com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
    }
  }
}
